package e_OOP;

public class Qu3_3 { //Qu3_3의 클래스가 로드됩니다 // 클래스친구를찾아보면 클래스변수는없고 클래스 메서드는 메인메서드하나가 있다.
	public static void main(String[] args) {  // 메인메서드를 올려주고 메인메서드는 호출되고 callstack에 쌓아줍니다.
		
		MethodTest.add01();     
		// MethodTest가 있는지 메소드에어리아에서 확인하고 로드되지않았기 때문에 메소드테스트를 로드해줍니다
		// 메소드 테스트의 클래스변수인 a 와 b를 입력해주고 각각의 수로 초기화를해줍니다
		// 메소드 테스트의 클레스 메소드 인 add01과 add02를 입력해줍니다
		// 클래스메소드의 add02는 int형 변수 한개를 매개변수로 갖기때문에 add02(int)로 적어준다 // 변수의 타입과 변수의 갯수가 중요하다
		// 메소드테스트 클래스에있는 add01메소드를 호출하여 콜스텍여영역에 쌓아줍니다.
		// add01에는 지역변수인 result가 선언되어있고 add01안에다 써준다
		// add01이 메소드테스트안에있기때문에 메소드테스트클래스의 클래스변수인 a와 b가 입력되어 result는 30이된다.
		
		int a = MethodTest.add02(10);            // 대입연산자가 있으니까 왼쪽에있는 저장공간을만들고 오른쪽의값을 왼쪽에 대입해주기위해
		// add02는 클래스 메서드입니다			     // a를 main메소드에 선언해주고 
		// 때문에 MethodTest의 클래스메서드 호출 		 // 메소드클래스의 add02를 호출해준다 a가 호출해주었기때문에 공간을만들어주고 화살표로 연결해준다.
		// add02에서 int형 변수를 필요로 하기 때문에 담아준다  	// 메소드를 호출할때 가져가는값을 인자값이라하고 10이다. 	
		// f3을누르면 저장될 값이 int형인것을 알수있다		// add02(10)으로 적어준다
		// int형 변수 a에 담아준다					// 메소드오면 매개변수가 중요하다 add02의 매개변수 c를 선언해준다
												// 매개변수c를 인자값 10으로 초기화해준다
												// 그안에 선언된 지역변수 result 선언해준다 
										// a와 b는 메소드클래스에 선언되어있기때문에 a=10 b=20을 가져오고 c=10이라 result=40이된다.
												// main 메서드의 a에 result 값을 돌려준다
												// return문을 만났기 때문에 정상적으로 종료된다. 퇴근시킨다. 
			
		
		System.out.println(a);                     // a를 출력하라 햇으니까 콘솔창에 40이 나온다
		// a를 출력해본다
		
		
		
		MethodTest method = new MethodTest();          // 대입연산자가 있으니까 왼쪽부터 
													// 메서드테스트라는 클래스가 로드되었는지 확인 로드가 되어있다
													// 메인메소드의 지역변수가 method가 선언되어있다 main메소드영역에
													// new 인스턴스화
													// heap 영역에 주소가 생성된다.
													// 인스턴스 친구들이 같이온다 인스턴스 변수와 인스턴스 메소드
													// c= 50 add03(int) add04() 가 주소에 로드되고 
													// 주소값을 지역변수 method 에 화살표로 연결
		
		int b = method.add03(10); 							// b라는 메인메소드의 지역변수가 선언이되고 
		// add03은 인스턴스 메서드입니다.	// method 주소의 add03이 호출되고 쌓아줍니다 인자값을 10으로 들어온다 
															// 지역변수 result가 선언된다
		// 인스턴스 메서드는 참조변수를 통해서 호출할수 있기때문에			// 매개변수 10이들어와서 c가 10으로 초기화된다
		// 인스턴스화를 통해 참조변수를 설정해줍니다.					// this는 자기클래스에서 가져오는 값이기때문에 들어오고
		// 참조변수.인스턴스 메서드명								// result = 60
		// 인트형변수를 입력해줘야한다								// main 메서드의 b에 result 값을 돌려준다.
		// add에서 돌려주는값이 int형이기 때문에 int형 변수 b에 저장해줍니다.// return 문을 만났기 때문에 정상적으로 종료된다.
		
		System.out.println(b);
		// b를출력해서 확인합니다.
		
		
		method.add04();								// 참조변수 method의 주소에 add04 메소드를 call
		// add04는 인스턴스메서드입니다.					// 지역변수 x를 add04에 선언한다.
		// 인스턴스 메서드는 참조변수를 통해서 호출할수 있다.		// random 값이 들어가고
		// 참조변수를 만들어주고							// add04의 지역변수 result 를 선언하고
		// 참조변수.인스턴스메서드명						// add04 인스턴스메소드의 같은클래스의 변수 c를 가져오고 x와 연산되어
		// 달라는것이 없으니 입력값도없다					// result에 입력된다.
													// 출력된다.
		// add04는 돌려주는것이 없으니 변수에 담을 필요도 없다.	// 메서드가 끝났기 때문에 종료된다.
		
	
		
		
		
	}	
}



class MethodTest{
	static int a = 10;
	static int b = 20;
	
	int c = 50;
	
	static void add01(){
		int result = a + b;
		System.out.println(result);
	}
	
	static int add02(int c){
		int result = a + b + c;
		return result;
	}
	
	int add03(int c){
		int result = this.c + c;  //지역변수와 전역변수의 이름이 같을때 구분하기위해서 this를 입력해준다.
		return result;
	}
	
	void add04(){   //반환할것이 없다.
		int x = (int)(Math.random()*101);
		int result = c + x;
		System.out.println(result); //출력하여라
	}
	
	
}